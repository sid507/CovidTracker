{"version":3,"sources":["Infobox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Infobox","title","cases","total","date","Card","className","CardContent","Typography","color","sortData","data","sortedData","sort","a","b","Number","active","Map","stateInfo","rajya","center","zoom","TileLayer","url","attribution","map","mc","px","forEach","element","toLowerCase","localeCompare","name","push","Math","sqrt","console","log","Circle","lat","lon","fillOpacity","radius","length","Popup","round","pow","Table","states","LineGraph","casetype","useState","setData","useEffect","fetch","then","Response","json","cases_time_series","buildChartData","X","Y","state","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","display","text","fontSize","legend","tooltips","mode","intersect","callbacks","tooltipItem","numeral","value","format","App","setStates","currentstate","setstate","setStateInfo","tabledata","settabledata","lng","response","statewise","filter","c","getstatesData","FormControl","Select","variant","onChange","event","statecode","target","getStateInfo","MenuItem","deltaconfirmed","confirmed","lastupdatedtime","deltarecovered","recovered","deltadeaths","deaths","class","style","aria-hidden","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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aASW+B,mBAAS,IATpB,mBASN9B,EATM,aAWa8B,mBAAS,CACjC,CACEnB,KAAM,cACNO,IAAK,UACLC,IAAK,WAEP,CACER,KAAM,oBACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,WACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,UACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,QACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,UACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,UACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,YACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,SACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,cACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,QACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,YACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,SACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,gBACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,iBACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,cACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,mBACNO,IAAK,UACLC,IAAK,UAEP,CACER,KAAM,SACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,YACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,SACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,YACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,MACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,UACNO,IAAK,QACLC,IAAK,SAEP,CACER,KAAM,oBACNO,IAAK,UACLC,IAAK,SAGP,CACER,KAAM,QACNO,IAAK,UACLC,IAAK,WAEP,CACER,KAAM,aACNO,IAAK,YACLC,IAAK,aAEP,CACER,KAAM,YACNO,IAAK,YACLC,IAAK,aAEP,CACER,KAAM,iBACNO,IAAK,YACLC,IAAK,aAGP,CACER,KAAM,UACNO,IAAK,YACLC,IAAK,aAGP,CACER,KAAM,eACNO,IAAK,YACLC,IAAK,gBAnKI,mBAWNrB,EAXM,KAqOb,OArOa,KAyKbkC,qBAAU,WACRC,MAAM,0CACHC,MAAK,SAACmC,GAAD,OAAcA,EAASjC,UAC5BF,MAAK,SAAC7C,GACL,IACMI,EADIJ,EAAKiF,UACHC,QAAO,SAAClF,GAAD,MAAU,UAAAA,EAAKoD,SAClCwB,EAAaxE,EAAE,SAElB,IAaHuC,qBAAU,YACW,uCAAG,sBAAAxC,EAAA,sEACdyC,MAAM,0CACTC,MAAK,SAACmC,GAAD,OAAcA,EAASjC,UAC5BF,MAAK,SAAC7C,GACL,IACMI,EADIJ,EAAKiF,UACHlE,KAAI,SAACoE,GAAD,MAAQ,CACtB7D,KAAM6D,EAAE/B,MACR9C,OAAQ6E,EAAE7E,WAGNL,EAAaF,EAASK,GAC5BqE,EAAUxE,GAEV6E,EAAa7E,MAbG,2CAAH,qDAmBnBmF,KACC,IAmBD,yBAAKzF,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,gDACA,kBAAC0F,EAAA,EAAD,CAAa1F,UAAU,iBACrB,kBAAC2F,EAAA,EAAD,CAAQC,QAAQ,WAAWjB,MAAOI,EAAcc,SAtBpC,SAACC,GACrB,IAAMC,EAAYD,EAAME,OAAOrB,MAC/BK,EAASe,GACS,uCAAG,sBAAAvF,EAAA,sEACbyC,MAAM,0CACTC,MAAK,SAACmC,GAAD,OAAcA,EAASjC,UAC5BF,MAAK,SAAC7C,GACL,IACMI,EADIJ,EAAKiF,UACHC,QAAO,SAAClF,GAAD,OAAUA,EAAKoD,QAAL,UAAkBsC,MAC/Cd,EAAaxE,EAAE,OANA,2CAAH,oDAWlBwF,KAUYtD,EAAOvB,KAAI,SAAAqC,GACT,OACE,kBAACyC,EAAA,EAAD,CAAUvB,MAAOlB,EAAM9B,MAAO8B,EAAM9B,YAOhD,yBAAK3B,UAAU,cACb,kBAAC,EAAD,CAASL,MAAM,oBAAoBC,MAAOiB,EAAUsF,eAAgBtG,MAAOgB,EAAUuF,UAAWtG,KAAMe,EAAUwF,kBAChH,kBAAC,EAAD,CAAS1G,MAAM,WAAWC,MAAOiB,EAAUyF,eAAgBzG,MAAOgB,EAAU0F,UAAWzG,KAAMe,EAAUwF,kBACvG,kBAAC,EAAD,CAAS1G,MAAM,QAAQC,MAAOiB,EAAU2F,YAAa3G,MAAOgB,EAAU4F,OAAQ3G,KAAMe,EAAUwF,mBAgBhG,6BACE,kBAAC,EAAD,CAAKxF,UAAW8B,EAAQ7B,MAAOA,EAAOC,OAAQA,EAAQC,KAAMA,KAG9D,6BACE,yBAAKhB,UAAU,UAAf,aACY,uBAAG0G,MAAM,cAAcC,MAAO,CAAExG,MAAM,OAAUyG,cAAY,SADxE,cAGA,yBAAK5G,UAAU,UACb,uBAAG6G,KAAK,8BAA6B,uBAAGH,MAAM,eAAeE,cAAY,aAI/E,kBAAC7G,EAAA,EAAD,CAAMC,UAAU,aAEd,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAO0C,OAAQuC,IACf,sCACA,kBAAC,EAAD,CAAWrC,SAAU,mBACrB,yCACA,kBAAC,EAAD,CAAWA,SAAU,uBCjSXiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/F,QAAQ+F,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.e835dfeb.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nfunction Infobox({ title, cases, total, date }) {\r\n    return (\r\n        <Card className=\"infobox\">\r\n            <CardContent>\r\n                <Typography className='infobox__title' color=\"textPrimary\">\r\n                    {title}\r\n                </Typography>\r\n                <h2 className='infobox__case'>{cases}</h2>\r\n                <Typography className='infobox__total' color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n                <Typography className='infobox__total' color=\"textSecondary\">\r\n                    {date} Last updated\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default Infobox\r\n","import { Circle } from \"leaflet\";\r\nimport React from \"react\";\r\n// import { Circle, Popup } from \"react-leaflet\";\r\n\r\n\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    sortedData.sort((a, b) => {\r\n        if (Number(a.active) > Number(b.active)) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    })\r\n\r\n    return sortedData;\r\n}\r\n// export const showDataonMap = (data) => {\r\n//     return (\r\n\r\n//     )\r\n// }","import React, { useState } from 'react';\r\nimport { Map as LeafletMap, TileLayer, Circle, Popup } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataonMap } from \"./util\";\r\n// import { Circle,  } from \"react-leaflet\";\r\n\r\n\r\nfunction Map({ stateInfo, rajya, center, zoom }) {\r\n\r\n    // var px = 0;\r\n\r\n    // stateInfo.forEach(element => {\r\n    //     if (element['name'] == \"Total\") {\r\n    //         console.log(element.confirmed);\r\n    //     }\r\n    //     // console.log(element);\r\n    // });\r\n    // var a = stateInfo.filter((data) => data.state === \"Assam\")\r\n    // console.log(a.confirmed);\r\n    // const [state, setState] = useState(0);\r\n\r\n    return (\r\n\r\n        <div className=\"map\">\r\n            <LeafletMap center={center}\r\n                zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' />\r\n                {\r\n\r\n                    rajya.map((mc) => {\r\n                        // var px = 100000;\r\n\r\n                        var px = [];\r\n\r\n                        stateInfo.forEach(element => {\r\n                            if ((element['name'].toLowerCase()).localeCompare((mc.name).toLowerCase()) === 0) {\r\n\r\n                                px.push(Math.sqrt(element.active) * 1000);\r\n                                console.log(element.name, mc.name, px)\r\n                            }\r\n                            // else {\r\n                            //     // this.px = 0;\r\n                            //     px.push(0);\r\n                            // }\r\n                            console.log(px);\r\n                            // console.log(typeof mc.name)\r\n\r\n                        })\r\n\r\n\r\n                        return (\r\n                            <Circle\r\n\r\n                                center={[Number(mc.lat), Number(mc.lon)]}\r\n                                color={`#000`}\r\n\r\n                                fillOpacity={0.4}\r\n                                radius={px[px.length - 1]\r\n\r\n                                }\r\n\r\n\r\n                            >\r\n                                <Popup>\r\n                                    <div className=\"info-container\">\r\n                                        <div className=\"info-name\">{mc.name}</div>\r\n                                        <div>Total: {Math.round(Math.pow(px[px.length - 1] / 1000, 2))}</div>\r\n                                    </div>\r\n                                </Popup>\r\n                            </Circle>\r\n                        )\r\n                    })\r\n                }\r\n\r\n            </LeafletMap>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css';\r\n\r\nfunction Table({ states }) {\r\n    // console.log(states);\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                states.map(({ name, active }) => (\r\n                    <tr>\r\n                        <td>{name}</td>\r\n                        <td>\r\n                            <strong>{active}</strong>\r\n                        </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\n\r\n\r\nfunction LineGraph({ casetype }) {\r\n    const [data, setData] = useState({});\r\n    console.log(`${casetype}`);\r\n    const options = {\r\n        legend: {\r\n            display: false,\r\n        },\r\n        elements: {\r\n            point: {\r\n                radius: 0,\r\n            },\r\n        },\r\n        maintainAspectRatio: false,\r\n        tooltips: {\r\n            mode: \"index\",\r\n            intersect: false,\r\n            callbacks: {\r\n                label: function (tooltipItem, data) {\r\n                    return numeral(tooltipItem.value).format(\"+0,0\");\r\n                },\r\n            },\r\n        },\r\n        scales: {\r\n            xAxes: [\r\n                {\r\n                    type: \"time\",\r\n                    time: {\r\n                        format: \"DD MM\",\r\n                        tooltipFormat: \"ll\",\r\n                    },\r\n                },\r\n            ],\r\n            yAxes: [\r\n                {\r\n                    gridLines: {\r\n                        display: false,\r\n                    },\r\n                    ticks: {\r\n                        // Include a dollar sign in the ticks\r\n                        callback: function (value, index, values) {\r\n                            return numeral(value).format(\"0a\");\r\n                        },\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n    };\r\n    useEffect(() => {\r\n        fetch('https://api.covid19india.org/data.json')\r\n            .then((Response) => Response.json())\r\n            .then((data) => {\r\n                const a = data.cases_time_series;\r\n                const b = buildChartData(a, { casetype });\r\n                setData(b);\r\n\r\n\r\n            })\r\n    }, []);\r\n\r\n    const buildChartData = (data, casestype = \"dailyconfirmed\") => {\r\n        const X = [], Y = [];\r\n        let lastDatapoint;\r\n        data.forEach(element => {\r\n\r\n            X.push(element.date);\r\n            Y.push(element[`${casetype}`])\r\n        });\r\n        return { X, Y };\r\n    }\r\n    const state = {\r\n        labels: data['X'],\r\n        datasets: [\r\n            {\r\n                label: 'Cases',\r\n                backgroundColor: 'rgba(75,192,192,1)',\r\n                borderColor: 'rgba(255,0,0,1)',\r\n                borderWidth: 1,\r\n                data: data['Y']\r\n            }\r\n        ]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Line\r\n                data={state}\r\n                options={{\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Increase in Cases',\r\n                        fontSize: 2\r\n                    },\r\n                    legend: {\r\n                        display: false,\r\n\r\n                    },\r\n                    tooltips: {\r\n                        mode: \"index\",\r\n                        intersect: false,\r\n                        callbacks: {\r\n                            label: function (tooltipItem, data) {\r\n                                return numeral(tooltipItem.value).format(\"+0,0\");\r\n                            },\r\n                        },\r\n                    }\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport { MenuItem, FormControl, Select, Card, CardContent, Typography, colors } from '@material-ui/core';\n// import { Card, CardContent, Typography } from '@material-ui/core';\n\n\nimport './App.css';\nimport Infobox from './Infobox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\n\nimport { sortData } from './util';\n\nfunction App() {\n  const Maharashtra = 'Maharashtra';\n\n  const [states, setStates] = useState([]);\n  const [govlab, setGovlab] = useState([]);\n  const [currentstate, setstate] = useState('Total');\n  const [stateInfo, setStateInfo] = useState({});\n  const [tabledata, settabledata] = useState([]);\n  const [center, setcenter] = useState({ lat: 20.5937, lng: 78.9629 });\n  const [zoom, setzoom] = useState(5);\n\n  const [rajya, setRajya] = useState([\n    {\n      name: 'Maharashtra',\n      lat: '19.7515',\n      lon: '75.7139'\n    },\n    {\n      name: 'Arunachal Pradesh',\n      lat: '28.21',\n      lon: '94.72'\n    },\n    {\n      name: 'Nagaland',\n      lat: '26.15',\n      lon: '94.56'\n    },\n    {\n      name: 'Manipur',\n      lat: '24.66',\n      lon: '93.90'\n    },\n    {\n      name: 'Assam',\n      lat: '26.20',\n      lon: '92.93'\n    },\n    {\n      name: 'Mizoram',\n      lat: '23.16',\n      lon: '92.93'\n    },\n    {\n      name: 'Tripura',\n      lat: '23.94',\n      lon: '91.98'\n    },\n    {\n      name: 'Meghalaya',\n      lat: '25.46',\n      lon: '91.36'\n    },\n    {\n      name: 'Sikkim',\n      lat: '27.53',\n      lon: '88.51'\n    },\n    {\n      name: 'West Bengal',\n      lat: '22.98',\n      lon: '87.85'\n    },\n    {\n      name: 'Bihar',\n      lat: '25.09',\n      lon: '85.31'\n    },\n    {\n      name: 'Jharkhand',\n      lat: '23.61',\n      lon: '85.27'\n    },\n    {\n      name: 'Odisha',\n      lat: '20.95',\n      lon: '85.09'\n    },\n    {\n      name: 'Uttar Pradesh',\n      lat: '26.84',\n      lon: '80.94'\n    },\n    {\n      name: 'Andhra Pradesh',\n      lat: '15.91',\n      lon: '79.74'\n    },\n    {\n      name: 'Uttarakhand',\n      lat: '30.06',\n      lon: '79.01'\n    },\n    {\n      name: 'Himachal Pradesh',\n      lat: '31.1048',\n      lon: ' 77.17'\n    },\n    {\n      name: 'Kerala',\n      lat: '10.85',\n      lon: '76.27'\n    },\n    {\n      name: 'Karnataka',\n      lat: '15.31',\n      lon: '75.71'\n    },\n    {\n      name: 'Punjab',\n      lat: '31.14',\n      lon: '75.34'\n    },\n    {\n      name: 'Rajasthan',\n      lat: '27.02',\n      lon: '74.21'\n    },\n    {\n      name: 'Goa',\n      lat: '15.29',\n      lon: '74.12'\n    },\n    {\n      name: 'Gujarat',\n      lat: '22.25',\n      lon: '71.19'\n    },\n    {\n      name: 'Jammu and Kashmir',\n      lat: '33.7782',\n      lon: '76.57'\n    },\n\n    {\n      name: 'Delhi',\n      lat: '28.7041',\n      lon: '77.1025'\n    },\n    {\n      name: 'Tamil Nadu',\n      lat: '11.059821',\n      lon: '78.387451'\n    },\n    {\n      name: 'Telangana',\n      lat: '17.123184',\n      lon: '79.208824'\n    },\n    {\n      name: 'Madhya Pradesh',\n      lat: '23.473324',\n      lon: '77.947998'\n\n    },\n    {\n      name: 'Haryana',\n      lat: '29.065773',\n      lon: '76.040497'\n\n    },\n    {\n      name: 'Chhattisgarh',\n      lat: '21.295132',\n      lon: '81.828232'\n    }\n  ])\n\n\n\n  useEffect(() => {\n    fetch('https://api.covid19india.org/data.json')\n      .then((response) => response.json())\n      .then((data) => {\n        const a = data.statewise;\n        const b = a.filter((data) => data.state === `Total`)\n        setStateInfo(b[0]);\n      })\n  }, []);\n\n\n  // useEffect(() => {\n  //   fetch('https://covid-19india-api.herokuapp.com/v2.0/icmr_lab_details')\n  //     // .then((response) => response.json())\n  //     .then((response) => {\n  //       setGovlab(response);\n  //       console.log(response)\n  //     })\n  // })\n\n\n  useEffect(() => {\n    const getstatesData = async () => {\n      await fetch(\"https://api.covid19india.org/data.json\")\n        .then((response) => response.json())\n        .then((data) => {\n          const a = data.statewise;\n          const b = a.map((c) => ({\n            name: c.state,\n            active: c.active\n          }));\n          // console.log(b);\n          const sortedData = sortData(b);\n          setStates(sortedData);\n\n          settabledata(sortedData);\n\n\n\n        });\n    };\n    getstatesData();\n  }, []);\n\n  const onStateChange = (event) => {\n    const statecode = event.target.value;\n    setstate(statecode);\n    const getStateInfo = async () => {\n      await fetch(\"https://api.covid19india.org/data.json\")\n        .then((response) => response.json())\n        .then((data) => {\n          const a = data.statewise;\n          const b = a.filter((data) => data.state === `${statecode}`)\n          setStateInfo(b[0]);\n          // console.log(b[0]);\n\n        })\n    }\n    getStateInfo();\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"App__left\">\n        <div className='app__header'>\n          <h1>Covid-19 Tracker</h1>\n          <FormControl className='app__dropdown'>\n            <Select variant='outlined' value={currentstate} onChange={onStateChange} >\n              {\n                states.map(state => {\n                  return (\n                    <MenuItem value={state.name}>{state.name}</MenuItem>\n                  )\n                })\n              }\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <Infobox title=\"Coronavirus Cases\" cases={stateInfo.deltaconfirmed} total={stateInfo.confirmed} date={stateInfo.lastupdatedtime} ></Infobox>\n          <Infobox title=\"Recoverd\" cases={stateInfo.deltarecovered} total={stateInfo.recovered} date={stateInfo.lastupdatedtime}  ></Infobox>\n          <Infobox title=\"Death\" cases={stateInfo.deltadeaths} total={stateInfo.deaths} date={stateInfo.lastupdatedtime}   ></Infobox>\n\n        </div>\n        {/* <div>\n          <Card className=\"infobox\">\n            <CardContent>\n              <Typography className='infobox__title' color=\"textPrimary\">\n                Goverment Lab:\n              </Typography>\n\n              <Typography className='infobox__total' color=\"textSecondary\">\n                HelpLine No.\n                </Typography>\n            </CardContent>\n          </Card>\n        </div> */}\n        <div>\n          <Map stateInfo={states} rajya={rajya} center={center} zoom={zoom} />\n\n        </div>\n        <div >\n          <div className=\"credit\">\n            Made with <i class=\"fa fa-heart\" style={{ color: `red` }} aria-hidden=\"true\"></i> by sid507\n          </div>\n          <div className=\"github\">\n            <a href=\"https://github.com/sid507/\"><i class=\"fa fa-github\" aria-hidden=\"true\"></i></a>\n          </div>\n        </div>\n      </div>\n      <Card className=\"App_right\">\n\n        <CardContent>\n          <Table states={tabledata} />\n          <h1 >Active</h1>\n          <LineGraph casetype={\"dailyconfirmed\"} />\n          <h1>Recovered</h1>\n          <LineGraph casetype={\"dailyrecovered\"} />\n        </CardContent>\n      </Card>\n\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}